# Default values for workshop-pipelines.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
#  repository: image-registry.openshift-image-registry.svc:5000/maximilianopizarro5-dev/workshop-pipelines
  repository: quay.io/maximilianopizarro/workshop-pipelines
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: workshop-pipelines-maximilianopizarro5-dev.apps.rm2.thpm.p1.openshiftapps.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

route:
  enabled: true  
  host: workshop-pipelines-maximilianopizarro5-dev.apps.rm2.thpm.p1.openshiftapps.com

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}


env:
  SPRING_PROFILES_ACTIVE: prod,api-docs
  JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
  SPRING_DATASOURCE_URL: jdbc:postgresql://workshop-pipelines-postgresql:5432/workshop-pipelines
  SPRING_DATASOURCE_USERNAME: postgres
  SPRING_DATASOURCE_PASSWORD: postgres
  JDK_JAVA_OPTIONS: -Xms1G -Xmx2G -XX:-UseGCOverheadLimit -XX:-ExitOnOutOfMemoryError -XX:+UseParallelGC -Dfile.encoding=UTF8 -Duser.timezone=America/Buenos_Aires
  JAVA_MAX_MEM_RATIO: 85
  JAVA_INITIAL_MEM_RATIO: 50
  JAVA_MAX_INITIAL_MEM: 2048
  GC_MAX_METASPACE_SIZE: 1024

postgresql:
  auth:
    database: workshop-pipelines
    username: postgres
    password: postgres 
  enabled: true
  image:
    registry: ghcr.io
    repository: bat-bs/bitnami-pgvector
    tag: pg16

  primary:
    initdb:
      scripts:
        create-librechat-db.sql: |
          -- Ensure the database exists
          CREATE DATABASE "workshop-pipelines" WITH OWNER postgres;

          -- Connect to the new database and create the pgvector extension
          \c workshop-pipelines
          CREATE EXTENSION IF NOT EXISTS vector;
          
          -- CREATE USER postgres WITH PASSWORD 'postgres';
          -- GRANT ALL PRIVILEGES ON DATABASE "workshop-pipelines" TO postgres;